class Solution {
public:
bool dfs(unordered_map<int,bool>&visited,unordered_map<int,list<int>>&adj, unordered_map<int,bool>&dfsvisited,int node,vector<int>&out)
{
    visited[node]=1;
    dfsvisited[node]=1;
    for(auto neighbour:adj[node])
    {
        if(!visited[neighbour])
        {
           bool ans= dfs(visited,adj,dfsvisited,neighbour,out);
          if(ans==true)
          {
              return true;

          }

        }

        else if(dfsvisited[neighbour]==true)
        {
            return true;

        }
    }
    out.push_back(node);

    dfsvisited[node]=false;
    return false;


}


vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
         unordered_map<int,list<int>>adj;
         vector<int>out;
        for(int i=0;i<prerequisites.size();i++)
        {
            int course=prerequisites[i][0];
            int preq=prerequisites[i][1];
            adj[course].push_back(preq);

        }
        unordered_map<int,bool>visited;
         unordered_map<int,bool>dfsvisited;
        for(int i=0;i<numCourses;i++)
        {
            if(!visited[i])
            {
               bool ans= dfs(visited,adj,dfsvisited,i,out);
               if(ans==true)
               {
                   vector<int>empty;
                   return empty;
               }

            }
        }
return out;
        
    }
};
